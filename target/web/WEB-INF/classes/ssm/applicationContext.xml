<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd">

	<!-- Spring 的配置文件，这里主要配置和业务逻辑相关的设置 -->
	
	<!-- 数据源，事务控制等 -->

	<!-- 扫描除了控制器之外的所有组件 -->
	<context:component-scan base-package="ssm">
		<context:exclude-filter type="annotation" 
		expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	
	<!-- ========================数据源 ======================-->
	<context:property-placeholder location="classpath:ssm/dbconfig.properties"/>
	<bean id="datasource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${jdbc.driver}"></property>
		<property name="jdbcUrl" value="${jdbc.url}"></property>
		<property name="user" value="${jdbc.user}"></property>
		<property name="password" value="${jdbc.password}"></property>
	</bean>	

	<!-- =================配置和 MyBatis 的整合=======================  -->
	<bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 指定 MyBatis 的全局配置文件的位置 -->
		<property name="configLocation" value="classpath:ssm/mybatis-config.xml"></property>
		<property name="dataSource" ref="datasource"></property>
		<!-- 指定 MyBatis 的所有映射文件 -->
		<property name="mapperLocations" value="classpath:Mapper/*.xml"></property>
	</bean>
	
	<!-- 配置扫描器，将 mybatis的接口的实现加入到IOC 容器中 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 扫描所有 dao 接口 的实现，加入到 IOC 容器中 -->
		<property name="basePackage" value="ssm.dao"></property>
	</bean>
	
	<!-- ===========================事务控制=============================== -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<!-- 控制数据源 -->
		<property name="dataSource" ref="datasource"></property>		
	</bean>
	
	<!-- 可以开启基于注解的事务，也可以使用Xml 配置形式的事务 ,一般比较重要的配置使用Xml来控制-->
		
	<aop:config>
		 <!-- 切入点表达式 -->
		 <aop:pointcut expression="execution(* ssm.service..*(..))" id="txPoint"/>
		 <!-- 配置事务增强 -->
		 <aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint"/>
	</aop:config>
	
	<!-- 配置事务增强，事务如何切入 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- 所有方法都是事务方法 -->
			<tx:method name="*"/>
			<!-- 以 get 开始的所有方法 -->
			<tx:method name="get*" read-only="true"/>
		</tx:attributes>
	</tx:advice>
	
	<!-- 开启基于注解的事务 -->
		<!-- <tx:annotation-driven/> -->
	
	<!-- 配置一个可以进行批量的 SqlSession ,在这个项目中用于添加模拟数据-->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactoryBean"></constructor-arg>
		<constructor-arg name="executorType" value="BATCH"></constructor-arg>
	</bean>
	<!--  
	Spring 配置文件的核心点
	数据源
	与mybatis的整合
	事务控制
	-->
</beans>
